{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","messageStart","messageRules","messageWin","messageLose","cells","querySelectorAll","gameScore","checkMove","emptyCells","filledCells","arrows","DIRECTIONS","startGame","forEach","clearCell","updateCellLists","hideMessage","showMessage","i","addNewTile","restartGame","setGameStart","randomCellIndex","getRandomCellIndex","randomNumber","getRandomNumber","randomCell","classList","add","textContent","handleArrowKeyAction","key","direction","cellsToMove","reverse","moveTile","length","checkAvailableMergers","Math","floor","random","cell","remove","filter","item","setGameRestart","cellIndex","emptyCell","merged","j","getNextCellIndex","indexOf","nextCell","mergeTiles","includes","newNumber","replace","arrow","nextCellIndex","ROW_SIZE","isVerticalMove","abs","maxIndex","messageElement","addEventListener","contains","keydownEvent","isStartButton","isMessageHidden"],"mappings":";AAAA,aAoOC,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAlOD,IAAMA,EAASC,SAASC,cAAc,WAChCC,EAAeF,SAASC,cAAc,kBACtCE,EAAeH,SAASC,cAAc,kBACtCG,EAAaJ,SAASC,cAAc,gBACpCI,EAAcL,SAASC,cAAc,iBACrCK,EAAQN,SAASO,iBAAiB,eAClCC,EAAYR,SAASC,cAAc,eAErCQ,GAAY,EAEZC,EAAa,GACbC,EAAc,GAEZC,EAAS,CAAC,UAAW,YAAa,YAAa,cAE/CC,EAAa,CACN,SAAC,EACC,UAAA,EACA,WAAC,EACA,WAAA,GAgChB,SAASC,IACPH,EAAYI,QAAQC,GACpBC,IAEAC,EAAYhB,GACZgB,EAAYb,GACZa,EAAYd,GACZe,EAAYhB,GAEP,IAAA,IAAIiB,EAAI,EAAGA,EAAI,EAAGA,IACrBC,IAIJ,SAASC,IACPX,EAAYI,QAAQC,GACpBC,IACAM,IAEAL,EAAYb,GACZa,EAAYd,GAGd,SAASiB,IACDG,IAAAA,EAAkBC,IAClBC,EAAeC,IACfC,EAAalB,EAAWc,GAE9BI,EAAWC,UAAUC,IAAmBJ,eAAAA,OAAAA,IACxCE,EAAWG,YAAiBL,GAAAA,OAAAA,GAE5BT,IAGF,SAASe,EAAqBC,GACtBC,IAD2B,EAC3BA,EAAYrB,EAAWoB,GAGVE,EAAAA,EAFCD,EAAY,EAAI,EAAIvB,GAAayB,UAAYzB,GAFhC,IAID,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAC9B0B,EAD8B,EAAA,MACfH,IALgB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAQP,IAAtBxB,EAAW4B,QAAiBC,KAC9BpB,EAAYd,GAIhB,SAASoB,IACAe,OAAAA,KAAKC,MAAMD,KAAKE,SAAWhC,EAAW4B,QAG/C,SAASX,IACAa,OAAAA,KAAKE,SAAW,GAAM,EAAI,EAGnC,SAAS1B,EAAU2B,GACjBA,EAAKd,UAAUe,OAAOD,EAAKd,UAAU,IACrCc,EAAKZ,YAAc,GACnBd,IAGF,SAASA,IACPP,EAAa,EAAIJ,GAAOuC,OAAO,SAAAC,GAAQA,OAA0B,IAA1BA,EAAKjB,UAAUS,SACtD3B,EAAc,EAAIL,GAAOuC,OAAO,SAAAC,GAAQA,OAAAA,EAAKjB,UAAUS,OAAS,IAGlE,SAASf,IACPxB,EAAO8B,UAAUe,OAAO,WACxB7C,EAAO8B,UAAUC,IAAI,SACrB/B,EAAOgC,YAAc,QACrBZ,EAAYjB,GACZM,EAAUuB,YAAc,IAG1B,SAASgB,IACPhD,EAAO8B,UAAUe,OAAO,SACxB7C,EAAO8B,UAAUC,IAAI,WACrB/B,EAAOgC,YAAc,UACrBb,EAAYf,GAGd,SAASkC,EAASM,EAAMT,GAKjB,IAJCc,IACFC,EAAYN,EACZO,GAAS,EAEJC,EAAIC,EAJK,EAAI9C,GAAO+C,QAAQV,GAIIT,GACjC,OAANiB,EACAA,EAAIC,EAAiBD,EAAGjB,GAAY,CAC9BoB,IAAAA,EAAWhD,EAAM6C,GAEnBR,GAAAA,EAAKZ,cAAgBuB,EAASvB,YAAa,CAC7CwB,EAAWZ,EAAMW,GACjBJ,GAAS,EACTjC,IACAD,EAAU2B,GACVlC,GAAY,EAEZ,MACK,IAAIC,EAAW8C,SAASF,GAG7B,MAFAL,EAAYK,EAMZL,IAAcN,GAASO,IACzBD,EAAUpB,UAAUC,IAAIa,EAAKd,UAAU,IACvCoB,EAAUlB,YAAcY,EAAKZ,YAC7Bf,EAAU2B,GACVlC,GAAY,EACZQ,KAIJ,SAASsC,EAAWZ,EAAMW,GAClBG,IAAAA,EAA+B,EAAnBd,EAAKZ,YAEvBuB,EAASvB,YAAc0B,EAEvBH,EAASzB,UACN6B,QAAQJ,EAASzB,UAAUiB,KAAK,GAAmBW,eAAAA,OAAAA,IAEtDzC,EAAU2B,GACV1B,IAEAT,EAAUuB,aAAevB,EAAUuB,YAAc0B,EAE/B,OAAdA,GACFtC,EAAYf,GAIhB,SAASmC,IACY5B,IADY,EACZA,EAAAA,EAAAA,GADY,IACC,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAArBgC,IAAqB,EAArBA,EAAqB,EAAA,MACV/B,EAAAA,EAAAA,GADU,IACF,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAjB+C,IAAAA,EAAiB,EAAA,MACpBzB,EAAYrB,EAAW8C,GAEvBC,EAAgBR,EADJ,EAAI9C,GAAO+C,QAAQV,GACaT,GAC5CoB,EAAWhD,EAAMsD,GAEnBA,GAAkB,OAAlBA,GAA0BjB,EAAKZ,cAAgBuB,EAASvB,YACnD,OAAA,GARmB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,MADD,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAcxB,OAAA,EAGT,SAASqB,EAAiBJ,EAAWd,GAC7B2B,IAIAC,EAHc,IAGGtB,KAAKuB,IAAI7B,GAC1B8B,EAAWF,EACbxD,EAAMgC,OAAS,EANF,GAOZE,KAAKC,MAAMO,EAPC,GAEG,GAAA,EASdY,EAAgBZ,EAAYd,EAE3B0B,OAAAA,IALUE,EACb,EATa,EAUbtB,KAAKC,MAAMO,EAVE,KAamBY,GAAiBI,EACjDJ,EACA,KAGN,SAASzC,EAAY8C,GACnBA,EAAepC,UAAUe,OAAO,UAGlC,SAAS1B,EAAY+C,GACnBA,EAAepC,UAAUC,IAAI,UA3M/B/B,EAAOmE,iBAAiB,QAAS,WAC3BnE,EAAO8B,UAAUsC,SAAS,SAC5BrD,IACSf,EAAO8B,UAAUsC,SAAS,YACnC7C,MAIJtB,SAASkE,iBAAiB,UAAW,SAAAE,GAC7BnC,IAAAA,EAAMmC,EAAanC,IAIrBrB,GAFJH,GAAY,EAERG,EAAO4C,SAASvB,KAClBD,EAAqBC,GAEjBxB,GAAW,CACP4D,IAAAA,EAAgBtE,EAAO8B,UAAUsC,SAAS,SAC1CG,EAAkBnE,EAAa0B,UAAUsC,SAAS,UAEpDE,IAAkBC,GACpBvB,IAGF1B","file":"main.1a9ebe0e.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageRules = document.querySelector('.message-rules');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst cells = document.querySelectorAll('.field-cell');\nconst gameScore = document.querySelector('.game-score');\n\nlet checkMove = false;\n\nlet emptyCells = [];\nlet filledCells = [];\n\nconst arrows = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\nconst DIRECTIONS = {\n  'ArrowUp': -4,\n  'ArrowDown': 4,\n  'ArrowLeft': -1,\n  'ArrowRight': 1,\n};\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    startGame();\n  } else if (button.classList.contains('restart')) {\n    restartGame();\n  }\n});\n\ndocument.addEventListener('keydown', keydownEvent => {\n  const key = keydownEvent.key;\n\n  checkMove = false;\n\n  if (arrows.includes(key)) {\n    handleArrowKeyAction(key);\n\n    if (checkMove) {\n      const isStartButton = button.classList.contains('start');\n      const isMessageHidden = messageRules.classList.contains('hidden');\n\n      if (isStartButton && !isMessageHidden) {\n        setGameRestart();\n      }\n\n      addNewTile();\n    }\n  }\n});\n\nfunction startGame() {\n  filledCells.forEach(clearCell);\n  updateCellLists();\n\n  hideMessage(messageStart);\n  hideMessage(messageLose);\n  hideMessage(messageWin);\n  showMessage(messageRules);\n\n  for (let i = 0; i < 2; i++) {\n    addNewTile();\n  }\n}\n\nfunction restartGame() {\n  filledCells.forEach(clearCell);\n  updateCellLists();\n  setGameStart();\n\n  hideMessage(messageLose);\n  hideMessage(messageWin);\n}\n\nfunction addNewTile() {\n  const randomCellIndex = getRandomCellIndex();\n  const randomNumber = getRandomNumber();\n  const randomCell = emptyCells[randomCellIndex];\n\n  randomCell.classList.add(`field-cell--${randomNumber}`);\n  randomCell.textContent = `${randomNumber}`;\n\n  updateCellLists();\n}\n\nfunction handleArrowKeyAction(key) {\n  const direction = DIRECTIONS[key];\n  const cellsToMove = direction > 0 ? [...filledCells].reverse() : filledCells;\n\n  for (const cell of cellsToMove) {\n    moveTile(cell, direction);\n  }\n\n  if (emptyCells.length === 0 && !checkAvailableMergers()) {\n    showMessage(messageLose);\n  }\n}\n\nfunction getRandomCellIndex() {\n  return Math.floor(Math.random() * emptyCells.length);\n}\n\nfunction getRandomNumber() {\n  return Math.random() < 0.9 ? 2 : 4;\n}\n\nfunction clearCell(cell) {\n  cell.classList.remove(cell.classList[1]);\n  cell.textContent = '';\n  updateCellLists();\n}\n\nfunction updateCellLists() {\n  emptyCells = [...cells].filter(item => item.classList.length === 1);\n  filledCells = [...cells].filter(item => item.classList.length > 1);\n}\n\nfunction setGameStart() {\n  button.classList.remove('restart');\n  button.classList.add('start');\n  button.textContent = 'Start';\n  showMessage(messageStart);\n  gameScore.textContent = '0';\n}\n\nfunction setGameRestart() {\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.textContent = 'Restart';\n  hideMessage(messageRules);\n}\n\nfunction moveTile(cell, direction) {\n  const cellIndex = [...cells].indexOf(cell);\n  let emptyCell = cell;\n  let merged = false;\n\n  for (let j = getNextCellIndex(cellIndex, direction);\n    j !== null;\n    j = getNextCellIndex(j, direction)) {\n    const nextCell = cells[j];\n\n    if (cell.textContent === nextCell.textContent) {\n      mergeTiles(cell, nextCell);\n      merged = true;\n      updateCellLists();\n      clearCell(cell);\n      checkMove = true;\n\n      break;\n    } else if (emptyCells.includes(nextCell)) {\n      emptyCell = nextCell;\n    } else {\n      break;\n    }\n  }\n\n  if (emptyCell !== cell && !merged) {\n    emptyCell.classList.add(cell.classList[1]);\n    emptyCell.textContent = cell.textContent;\n    clearCell(cell);\n    checkMove = true;\n    updateCellLists();\n  }\n}\n\nfunction mergeTiles(cell, nextCell) {\n  const newNumber = cell.textContent * 2;\n\n  nextCell.textContent = newNumber;\n\n  nextCell.classList\n    .replace(nextCell.classList.item(1), `field-cell--${newNumber}`);\n\n  clearCell(cell);\n  updateCellLists();\n\n  gameScore.textContent = +gameScore.textContent + newNumber;\n\n  if (newNumber === 2048) {\n    showMessage(messageWin);\n  }\n}\n\nfunction checkAvailableMergers() {\n  for (const cell of filledCells) {\n    for (const arrow of arrows) {\n      const direction = DIRECTIONS[arrow];\n      const cellIndex = [...cells].indexOf(cell);\n      const nextCellIndex = getNextCellIndex(cellIndex, direction);\n      const nextCell = cells[nextCellIndex];\n\n      if (nextCellIndex !== null && cell.textContent === nextCell.textContent) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction getNextCellIndex(cellIndex, direction) {\n  const ROW_SIZE = 4;\n  const DIRECTION_Y = 4;\n  const DIRECTION_X = 1;\n\n  const isVerticalMove = Math.abs(direction) === DIRECTION_Y;\n  const maxIndex = isVerticalMove\n    ? cells.length - 1\n    : (Math.floor(cellIndex / ROW_SIZE) + DIRECTION_X) * ROW_SIZE - DIRECTION_X;\n  const minIndex = isVerticalMove\n    ? 0\n    : Math.floor(cellIndex / ROW_SIZE) * ROW_SIZE;\n  const nextCellIndex = cellIndex + direction;\n\n  return nextCellIndex >= minIndex && nextCellIndex <= maxIndex\n    ? nextCellIndex\n    : null;\n}\n\nfunction showMessage(messageElement) {\n  messageElement.classList.remove('hidden');\n}\n\nfunction hideMessage(messageElement) {\n  messageElement.classList.add('hidden');\n}\n"]}